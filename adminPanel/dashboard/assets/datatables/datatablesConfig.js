import moment from 'moment';

//handle datatable for categories
$(function() {
    'use strict';

    var dt_basic_table = $(".categories-datatables-basic");

    // DataTable with buttons
    // --------------------------------------------------------------------

    if (dt_basic_table.length) {
        const dt_basic = dt_basic_table.DataTable({

        columns: [
            { data: 'Name' , name: "name" },
            { data: 'Status' , name: "status" },
            { data: 'CreateAt' , name: "createAt"},
            { data: 'LastUpdatedAt' , name: "lastUpdatedAt" },
            { data: '' }
        ],

        columnDefs: [
                {
                    // For Responsive
                    className: '',
                    targets: 0,
                    responsivePriority: 1,
                    render: function (data, type, full, meta) {
                        var $user_img = full['Image'],
                            $name = full['Name'];
    
                        if ($user_img) {
                            // For Avatar image
                            var $output =
                            '<img src="' + $user_img[0].url + '" alt="Avatar" class="rounded-circle" width="50" height="50">';
                        } else {
                            // For Avatar badge
                            var stateNum = Math.floor(Math.random() * 6);
                            var states = ['success', 'danger', 'warning', 'info', 'primary', 'secondary'];
                            var $state = states[stateNum],
                            $name = full['Name'],
                            $initials = $name.match(/\b\w/g) || [];
                            $initials = (($initials.shift() || '') + ($initials.pop() || '')).toUpperCase();
                            $output = '<span class="avatar-initial rounded-circle bg-label-' + $state + '">' + $initials + '</span>';
                        }
                        // Creates full output for row
                        var $row_output =
                            '<div class="d-flex justify-content-start align-items-center categories-tr">' +
                            '<div class="avatar-wrapper">' +
                            '<div class="avatar me-2">' +
                            $output +
                            '</div>' +
                            '</div>' +
                            '<div class="d-flex flex-column">' +
                            '<span class="emp_name text-truncate">' +
                            $name +
                            '</span>' +
                            '<small class="emp_post text-truncate text-muted">'
                                +"Generated by admin omar"+
                            '</small>' +
                            '</div>' +
                            '</div>';
                        return $row_output;
                        
                    }
                },
                {
                    // For Responsive
                    className: 'js-status',
                    responsivePriority: 2,
                    targets: 1,
                    render: function (data, type, full, meta) {
                        return `
                        <span style="display:inline-block; padding: 0px 15px;border-radius:3px; background-color:${data ? '#00ff001a' : '#ff070730'}; color: ${data ? '#1F8805' : '#d90000'}; font-size: 14px;">
                            ${data ? "Available" : "Deleted"}
                        </span>  
                        `
                    }
                },
                {
                    // For Responsive
                    responsivePriority: 3,
                    targets: 2,
                    render: function (data, type, full, meta) {
                        return moment(data).format('MMM Do YY');
                    }
                },
                {
                    // For Responsive
                    className: 'js-update',
                    targets: 3,
                    render: function (data, type, full, meta) {
                        return `
                            ${data == "" || data == undefined ? "no updated yet" : moment(data).format('MMM Do YY')}
                        `
                    }
                },
                {
                    // Actions
                    targets: -1,
                    title: 'Actions',
                    orderable: false,
                    searchable: false,
                    render: function (data, type, full, meta) {
                    return `
                        <div class="btn-group dropdown">
                            <div class="dropdown">
                                <button class="btn btn-label-primary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown">Actions</button>
                                <ul class="dropdown-menu">
                                    <li> <a class="dropdown-item js-update-category-btn" href="javascript:void(0);" data-id=${full["id"]}><i class="fa-solid fa-pencil me-2"></i> Edit</a> </li>
                                    <li> <a class="dropdown-item js-toggle-category-btn" href="javascript:void(0);" data-id=${full["id"]}><i class="fa-solid fa-trash-can me-2"></i> Toggle Status</a> </li>
                                </ul>
                            </div>
                        </div>
                        
                        `
                    ;
                    }
                }
            ],

        order: [[2, 'desc']],
        dom: '<"flex-column flex-md-row"<"head-label text-center"><"dt-action-buttons text-end pt-3 pt-md-0"B>><"row"<"col-sm-12 col-md-6"l><"col-sm-12 col-md-6 d-flex justify-content-center justify-content-md-end"f>>t<"row"<"col-sm-12 col-md-6"i><"col-sm-12 col-md-6"p>>',
        displayLength: 7,
        lengthMenu: [7, 10, 25, 50, 75, 100],
        buttons: [
        {
            extend: 'collection',
            className: 'btn btn-label-primary dropdown-toggle me-5',
            text: '<i class="ti ti-file-export me-sm-1"></i> <span class="d-none d-sm-inline-block">Export</span>',
            buttons: [
            {
                extend: 'print',
                text: '<i class="ti ti-printer me-1" ></i>Print',
                className: 'dropdown-item',
                exportOptions: { columns: [0 , 1 , 2 , 3] }
            },
            {
                extend: 'csv',
                text: '<i class="ti ti-file-text me-1" ></i>Csv',
                className: 'dropdown-item',
                exportOptions: { columns: [0 , 1 , 2 , 3] }
            },
            {
                extend: 'pdf',
                text: '<i class="ti ti-file-description me-1"></i>Pdf',
                className: 'dropdown-item',
                exportOptions: { columns: [0 , 1 , 2 , 3] }
            },
            {
                extend: 'copy',
                text: '<i class="ti ti-copy me-1" ></i>Copy',
                className: 'dropdown-item',
                exportOptions: { columns: [0 , 1 , 2 , 3] }
            }
            ]
        },
        ],
        responsive: {
            details: {
              display: $.fn.dataTable.Responsive.display.modal({
                header: function (row) {
                  var data = row.data();
                  return 'Details of ' + data['Name'];
                }
              }),
              type: 'column',
              renderer: function (api, rowIdx, columns) {
                var data = $.map(columns, function (col, i) {
                  return col.title !== '' // ? Do not show row in modal popup if title is blank (for check box)
                    ? '<tr data-dt-row="' +
                        col.rowIndex +
                        '" data-dt-column="' +
                        col.columnIndex +
                        '">' +
                        '<td>' +
                        col.title +
                        ':' +
                        '</td> ' +
                        '<td>' +
                        col.data +
                        '</td>' +
                        '</tr>'
                    : '';
                }).join('');
    
                return data ? $('<table class="table"/><tbody />').append(data) : false;
              }
            }
          }
        });
      }
    });


//handle datatable for products
$(function() {
    'use strict';

    var dt_basic_table = $(".datatables-products-basic");

    // DataTable with buttons
    // --------------------------------------------------------------------

    if (dt_basic_table.length) {
        const dt_basic = dt_basic_table.DataTable({


            columns: [
                { data: 'Name' , name: "name" },
                { data: 'Price' , name: "price" },
                { data: 'HasDiscount' , name: "hasDiscount"},
                { data: 'Status' , name: "status" },
                { data: '' }
            ],
            columnDefs: [
                {
                    // For Responsive
                    className: 'text-start',
                    targets: 0,
                    responsivePriority: 1,
                    render: function (data, type, full, meta) {
                        var $user_img = full['Images'],
                            $name = full['Name'],
                            $category = full['Category'];
                        if ($user_img) {
                            // For Avatar image
                            var $output =
                            '<img src="' + $user_img[0].url + '" alt="Avatar" class="rounded-circle" width="50" height="50">';
                        } else {
                            // For Avatar badge
                            var stateNum = Math.floor(Math.random() * 6);
                            var states = ['success', 'danger', 'warning', 'info', 'primary', 'secondary'];
                            var $state = states[stateNum],
                            $name = full['Name'],
                            $initials = $name.match(/\b\w/g) || [];
                            $initials = (($initials.shift() || '') + ($initials.pop() || '')).toUpperCase();
                            $output = '<span class="avatar-initial rounded-circle bg-label-' + $state + '">' + $initials + '</span>';
                        }
                        // Creates full output for row
                        var $row_output =
                            '<div class="d-flex justify-content-start align-items-center categories-tr">' +
                            '<div class="avatar-wrapper">' +
                            '<div class="avatar me-2">' +
                            $output +
                            '</div>' +
                            '</div>' +
                            '<div class="d-flex flex-column">' +
                            '<span class="emp_name text-truncate">' +
                            `<a href="/adminPanel/products/details?id=${full["id"]}" class="text-dark" title="${$name}">`+
                            $name.substring(0 , 30) + '...' +
                            `</a>`+
                            '</span>' +
                            '<small class="emp_post text-truncate text-muted">'
                                +$category+
                            '</small>' +
                            '<small class="emp_post text-truncate text-muted">'
                                +"Generated by admin"+
                            '</small>' +
                            '</div>' +
                            '</div>';
                        return $row_output;
                        
                    }
                },
                {
                    // For Responsive
                    responsivePriority: 2,
                    targets: 1,
                    render: function (data, type, full, meta) {
                        return `
                            <span style="white-space:nowrap;">${data}.00 EPG</span>
                        `
                    }
                },
                {
                    // For Responsive
                    responsivePriority: 3,
                    targets: 2,
                    render: function (data, type, full, meta) {
                        return `
                            <span style="display:inline-block; padding: 0px 15px;border-radius:3px; background-color:${data ? '#00ff001a' : '#7367f059'}; color: ${data ? '#1F8805' : '#0627d1'}; font-size: 14px;">
                                ${data ? "Has Discount" : "No Discount"}
                            </span>

                        `
                    }
                },
                {
                    // For Responsive
                    className: 'js-status',
                    targets: 3,
                    render: function (data, type, full, meta) {
                        return `
                        <span style="display:inline-block; padding: 0px 15px;border-radius:3px; background-color:${data ? '#00ff001a' : '#ff070730'}; color: ${data ? '#1F8805' : '#d90000'}; font-size: 14px;">
                            ${data ? "Available" : "Deleted"}
                        </span>                       
                        `
                    }
                },
                {
                    // Actions
                    targets: -1,
                    title: 'Actions',
                    orderable: false,
                    searchable: false,
                    render: function (data, type, full, meta) {
                    return `
                        <div class="btn-group dropdown">
                            <div class="dropdown">
                                <button class="btn btn-label-primary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown">Actions</button>
                                <ul class="dropdown-menu">
                                <li> <a class="dropdown-item" href="/adminpanel/products/details?id=${full["id"]}" data-id=${full["id"]}><i class="fa-regular fa-eye me-2"></i> Details</a> </li>
                                <li> <a class="dropdown-item js-add-sale-product" href="javascript:;" data-id=${full["id"]}><i class="fa-solid fa-percent me-2"></i> Add Sale</a> </li>
                                    <li> <a class="dropdown-item" href="/adminpanel/products/update?id=${full["id"]}" data-id=${full["id"]}><i class="fa-solid fa-pencil me-2"></i> Edit</a> </li>
                                    <li> <a class="dropdown-item js-toggle-product-btn" href="javascript:void(0);" data-id=${full["id"]}><i class="fa-regular fa-eye-slash me-2"></i> Toggle Status</a> </li>
                                    <li> <a class="dropdown-item js-delete-product-btn" href="javascript:void(0);" data-id=${full["id"]}><i class="fa-solid fa-trash-can me-2"></i>Delete</a> </li>
                                </ul>
                            </div>
                        </div>
                        
                        `
                    ;
                    }
                }
            ],
    


        order: [[2, 'desc']],
        displayLength: 7,
        dom: '<"flex-column flex-md-row"<"head-label text-center"><"dt-action-buttons text-end pt-3 pt-md-0"B>><"row"<"col-sm-12 col-md-6"l><"col-sm-12 col-md-6 d-flex justify-content-center justify-content-md-end"f>>t<"row"<"col-sm-12 col-md-6"i><"col-sm-12 col-md-6"p>>',
        lengthMenu: [7, 10, 25, 50, 75, 100],
        buttons: [
            {
                extend: 'collection',
                className: 'btn btn-label-primary dropdown-toggle me-5',
                text: '<i class="ti ti-file-export me-sm-1"></i> <span class="d-none d-sm-inline-block">Export</span>',
                buttons: [
                {
                    extend: 'print',
                    text: '<i class="ti ti-printer me-1" ></i>Print',
                    className: 'dropdown-item',
                    exportOptions: { columns: [0 , 1 , 2 , 3] }
                },
                {
                    extend: 'csv',
                    text: '<i class="ti ti-file-text me-1" ></i>Csv',
                    className: 'dropdown-item',
                    exportOptions: { columns: [0 , 1 , 2 , 3] }
                },
                {
                    extend: 'pdf',
                    text: '<i class="ti ti-file-description me-1"></i>Pdf',
                    className: 'dropdown-item',
                    exportOptions: { columns: [0 , 1 , 2 , 3] }
                },
                {
                    extend: 'copy',
                    text: '<i class="ti ti-copy me-1" ></i>Copy',
                    className: 'dropdown-item',
                    exportOptions: { columns: [0 , 1 , 2 , 3] }
                }
                ]
            },
            ],
            responsive: {
                details: {
                display: $.fn.dataTable.Responsive.display.modal({
                    header: function (row) {
                    var data = row.data();
                    return 'Details of ' + data['Name'];
                    }
                }),
                type: 'column',
                renderer: function (api, rowIdx, columns) {
                    var data = $.map(columns, function (col, i) {
                    return col.title !== '' // ? Do not show row in modal popup if title is blank (for check box)
                        ? '<tr data-dt-row="' +
                            col.rowIndex +
                            '" data-dt-column="' +
                            col.columnIndex +
                            '">' +
                            '<td>' +
                            col.title +
                            ':' +
                            '</td> ' +
                            '<td>' +
                            col.data +
                            '</td>' +
                            '</tr>'
                        : '';
                    }).join('');
        
                    return data ? $('<table class="table"/><tbody />').append(data) : false;
                }
                }
            }
        });
    }
    });


    //handle datatable for Users
$(function() {
    'use strict';

    var dt_basic_table = $(".datatables-users-basic");

    // DataTable with buttons
    // --------------------------------------------------------------------

    if (dt_basic_table.length) {
        const dt_basic = dt_basic_table.DataTable({


            columns: [
                { data: 'Username' , name: "username" },
                { data: 'Role' , name: "role" },
                { data: 'CreateAt' , name: "createAt"},
                { data: 'LastUpdatedAt' , name: "lastUpdatedAt" },
            ],
            columnDefs: [
                {
                    // For Responsive
                    className: 'text-start',
                    targets: 0,
                    responsivePriority: 1,
                    render: function (data, type, full, meta) {
                        var $user_img = full['ProfileImage'],
                            $name = full['Username'],
                            $email = full['Email'];
                        if ($user_img.imageUrl) {
                            // For Avatar image
                            var $output =
                            '<img src="' + $user_img.imageUrl + '" alt="Avatar" class="rounded-circle" width="50" height="50">';
                        } else {
                            // For Avatar badge
                            var stateNum = Math.floor(Math.random() * 6);
                            var states = ['success', 'danger', 'warning', 'info', 'primary', 'secondary'];
                            var $state = states[stateNum],
                            $name = full['Username'],
                            $initials = $name.match(/\b\w/g) || [];
                            $initials = (($initials.shift() || '') + ($initials.pop() || '')).toUpperCase();
                            $output = '<span class="avatar-initial rounded-circle bg-label-' + $state + '">' + $initials + '</span>';
                        }
                        // Creates full output for row
                        var $row_output =
                            '<div class="d-flex justify-content-start align-items-center categories-tr">' +
                            '<div class="avatar-wrapper">' +
                            '<div class="avatar me-2">' +
                            $output +
                            '</div>' +
                            '</div>' +
                            '<div class="d-flex flex-column">' +
                            '<span class="emp_name text-truncate">' +
                            `<a href="javascript:;" class="text-dark">`+
                            $name +
                            `</a>`+
                            '</span>' +
                            '<small class="emp_post text-truncate text-muted">'
                                +$email+
                            '</small>' +
                            '</div>' +
                            '</div>';
                        return $row_output;
                    }
                },
                {
                    // For Responsive
                    responsivePriority: 2,
                    targets: 1,
                    render: function (data, type, full, meta) {
                        return `<span style="display:inline-block; padding:0px 15px; background-color: #E4E9EE8F; color: #0989FF; box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px; border-radius:3px"> 
                            ${data.toLowerCase()}
                        </span>`
                    }
                },
                {
                    // For Responsive
                    responsivePriority: 3,
                    targets: 2,
                    render: function (data, type, full, meta) {
                        return moment(data).format('MMM Do YY');
                    }
                },
                {
                    // For Responsive
                    className: 'js-update',
                    targets: 3,
                    render: function (data, type, full, meta) {
                        return `
                            ${data == "" || data == undefined ? "no updated yet" : moment(data).format('MMM Do YY')}
                        `
                    }
                }
            ],
    


        order: [[2, 'desc']],
        displayLength: 7,
        dom: '<"flex-column flex-md-row"<"head-label text-center"><"dt-action-buttons text-end pt-3 pt-md-0"B>><"row"<"col-sm-12 col-md-6"l><"col-sm-12 col-md-6 d-flex justify-content-center justify-content-md-end"f>>t<"row"<"col-sm-12 col-md-6"i><"col-sm-12 col-md-6"p>>',
        lengthMenu: [7, 10, 25, 50, 75, 100],
        buttons: [
            {
                extend: 'collection',
                className: 'btn btn-label-primary dropdown-toggle me-5',
                text: '<i class="ti ti-file-export me-sm-1"></i> <span class="d-none d-sm-inline-block">Export</span>',
                buttons: [
                {
                    extend: 'print',
                    text: '<i class="ti ti-printer me-1" ></i>Print',
                    className: 'dropdown-item',
                    exportOptions: { columns: [0 , 1 , 2 , 3] }
                },
                {
                    extend: 'csv',
                    text: '<i class="ti ti-file-text me-1" ></i>Csv',
                    className: 'dropdown-item',
                    exportOptions: { columns: [0 , 1 , 2 , 3] }
                },
                {
                    extend: 'pdf',
                    text: '<i class="ti ti-file-description me-1"></i>Pdf',
                    className: 'dropdown-item',
                    exportOptions: { columns: [0 , 1 , 2 , 3] }
                },
                {
                    extend: 'copy',
                    text: '<i class="ti ti-copy me-1" ></i>Copy',
                    className: 'dropdown-item',
                    exportOptions: { columns: [0 , 1 , 2 , 3] }
                }
                ]
            },
            ],
            responsive: {
                details: {
                display: $.fn.dataTable.Responsive.display.modal({
                    header: function (row) {
                    var data = row.data();
                    return 'Details of ' + data['Username'];
                    }
                }),
                type: 'column',
                renderer: function (api, rowIdx, columns) {
                    var data = $.map(columns, function (col, i) {
                    return col.title !== '' // ? Do not show row in modal popup if title is blank (for check box)
                        ? '<tr data-dt-row="' +
                            col.rowIndex +
                            '" data-dt-column="' +
                            col.columnIndex +
                            '">' +
                            '<td>' +
                            col.title +
                            ':' +
                            '</td> ' +
                            '<td>' +
                            col.data +
                            '</td>' +
                            '</tr>'
                        : '';
                    }).join('');
        
                    return data ? $('<table class="table"/><tbody />').append(data) : false;
                }
                }
            }
        });
    }
    });

    //handle datatable for Customers
$(function() {
    'use strict';

    var dt_basic_table = $(".datatables-customer-basic");

    // DataTable with buttons
    // --------------------------------------------------------------------

    if (dt_basic_table.length) {
        const dt_basic = dt_basic_table.DataTable({


            columns: [
                { data: 'Username' , name: "username" },
                { data: 'Role' , name: "role" },
                { data: 'HistorySales' , name: "hsitoryLength"},
                { data: ''},
            ],
            columnDefs: [
                {
                    // For Responsive
                    className: 'text-start',
                    targets: 0,
                    responsivePriority: 1,
                    render: function (data, type, full, meta) {
                        var $user_img = full['ProfileImage'],
                            $name = full['Username'],
                            $email = full['Email'];
                        if ($user_img[0].url) {
                            // For Avatar image
                            var $output =
                            '<img src="' + $user_img[0].url + '" alt="Avatar" class="rounded-circle" width="50" height="50">';
                        } else {
                            // For Avatar badge
                            var stateNum = Math.floor(Math.random() * 6);
                            var states = ['success', 'danger', 'warning', 'info', 'primary', 'secondary'];
                            var $state = states[stateNum],
                            $name = full['Username'],
                            $initials = $name.match(/\b\w/g) || [];
                            $initials = (($initials.shift() || '') + ($initials.pop() || '')).toUpperCase();
                            $output = '<span class="avatar-initial rounded-circle bg-label-' + $state + '">' + $initials + '</span>';
                        }
                        // Creates full output for row
                        var $row_output =
                            '<div class="d-flex justify-content-start align-items-center categories-tr">' +
                            '<div class="avatar-wrapper">' +
                            '<div class="avatar me-2">' +
                            $output +
                            '</div>' +
                            '</div>' +
                            '<div class="d-flex flex-column">' +
                            '<span class="emp_name text-truncate">' +
                            `<a href="javascript:;" class="text-dark">`+
                            $name +
                            `</a>`+
                            '</span>' +
                            '<small class="emp_post text-truncate text-muted">'
                                +$email+
                            '</small>' +
                            '</div>' +
                            '</div>';
                        return $row_output;
                    }
                },
                {
                    // For Responsive
                    responsivePriority: 2,
                    targets: 1,
                    render: function (data, type, full, meta) {
                        return `<span style="display:inline-block; padding:0px 15px; background-color: #58fd4b8f; color: ##067137; box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px; border-radius:3px"> 
                            ${data.toLowerCase()}
                        </span>`
                    }

                },
                {
                    // For Responsive
                    responsivePriority: 3,
                    targets: 2,
                    render: function (data, type, full, meta) {
                        return `
                            <span style="padding:3px 8px; color:#FFF; background-color:#F00; font-weight:bold; border-radius: 3px; box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;">${data.length}</span>
                        `
                    }
                },
                {
                    // Actions
                    targets: -1,
                    title: 'Actions',
                    orderable: false,
                    searchable: false,
                    render: function (data, type, full, meta) {
                    return `
                        <a href="/adminPanel/customers/customer?id=${full["id"]}" class="btn btn-label-primary btn-sm " type="button">Details</a>
                        
                        `
                    ;
                    }
                }
            ],
    


        order: [[2, 'desc']],
        displayLength: 7,
        dom: '<"flex-column flex-md-row"<"head-label text-center"><"dt-action-buttons text-end pt-3 pt-md-0"B>><"row"<"col-sm-12 col-md-6"l><"col-sm-12 col-md-6 d-flex justify-content-center justify-content-md-end"f>>t<"row"<"col-sm-12 col-md-6"i><"col-sm-12 col-md-6"p>>',
        lengthMenu: [7, 10, 25, 50, 75, 100],
        buttons: [
            {
                extend: 'collection',
                className: 'btn btn-label-primary dropdown-toggle me-5',
                text: '<i class="ti ti-file-export me-sm-1"></i> <span class="d-none d-sm-inline-block">Export</span>',
                buttons: [
                {
                    extend: 'print',
                    text: '<i class="ti ti-printer me-1" ></i>Print',
                    className: 'dropdown-item',
                    exportOptions: { columns: [0 , 1 , 2 ] }
                },
                {
                    extend: 'csv',
                    text: '<i class="ti ti-file-text me-1" ></i>Csv',
                    className: 'dropdown-item',
                    exportOptions: { columns: [0 , 1 , 2 ] }
                },
                {
                    extend: 'pdf',
                    text: '<i class="ti ti-file-description me-1"></i>Pdf',
                    className: 'dropdown-item',
                    exportOptions: { columns: [0 , 1 , 2 ] }
                },
                {
                    extend: 'copy',
                    text: '<i class="ti ti-copy me-1" ></i>Copy',
                    className: 'dropdown-item',
                    exportOptions: { columns: [0 , 1 , 2 ] }
                }
                ]
            },
            ],
            responsive: {
                details: {
                display: $.fn.dataTable.Responsive.display.modal({
                    header: function (row) {
                    var data = row.data();
                    return 'Details of ' + data['Username'];
                    }
                }),
                type: 'column',
                renderer: function (api, rowIdx, columns) {
                    var data = $.map(columns, function (col, i) {
                    return col.title !== '' // ? Do not show row in modal popup if title is blank (for check box)
                        ? '<tr data-dt-row="' +
                            col.rowIndex +
                            '" data-dt-column="' +
                            col.columnIndex +
                            '">' +
                            '<td>' +
                            col.title +
                            ':' +
                            '</td> ' +
                            '<td>' +
                            col.data +
                            '</td>' +
                            '</tr>'
                        : '';
                    }).join('');
        
                    return data ? $('<table class="table"/><tbody />').append(data) : false;
                }
                }
            }
        });
    }
    });

    //handle datatable for Orders
$(function() {
    'use strict';

    var dt_basic_table = $(".datatables-orders-basic");

    // DataTable with buttons
    // --------------------------------------------------------------------

    if (dt_basic_table.length) {
        const dt_basic = dt_basic_table.DataTable({

        columns: [
            { data: 'username' , name: "name" },
            { data: 'email' , name: "email" },
            { data: 'nItems' , name: "numOfItem"},
            { data: 'totalPrice' , name: "totalPrice"},
            { data: '' }
        ],

        columnDefs: [
                {
                    // For Responsive
                    className: '',
                    targets: 0,
                    responsivePriority: 1,

                },
                {
                    // For Responsive
                    className: '',
                    responsivePriority: 2,
                    targets: 1,

                },
                {
                    // For Responsive
                    className: '',
                    responsivePriority: 3,
                    targets: 2,
                    render: function (data, type, full, meta) {
                        return`
    
                                <span style="padding:3px 8px; color:#FFF; background-color:#F00; font-weight:bold; border-radius: 3px; box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;">${data}</span>
                            
                            `
                        }
                },
                {
                    // For Responsive
                    className: '',
                    responsivePriority: 3,
                    targets: 3,
                    render: function (data, type, full, meta) {
                        return`
    
                                <span style="padding:3px 15px; color:#000; background-color:#FFF; box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;">${data}.00EPG</span>
                            
                            `
                        }
                },
                
                {
                    // Actions
                    targets: -1,
                    title: 'Actions',
                    orderable: false,
                    searchable: false,
                    render: function (data, type, full, meta) {
                    return `

                        <div class="btn-group dropdown">
                            <div class="dropdown">
                                <button class="btn btn-label-primary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown">Actions</button>
                                <ul class="dropdown-menu">
                                    <li> <a class="dropdown-item js-confirm-order-btn" href="javascript:void(0);" data-id=${full["orderId"]} data-customerId=${full["customerId"]}><i class="fa-solid fa-pencil me-2"></i>confirm</a> </li>
                                </ul>
                            </div>
                        </div>
                        
                        `
                    ;
                    }
                }
            ],

        order: [[1, 'desc']],
        dom: '<"flex-column flex-md-row"<"head-label text-center"><"dt-action-buttons text-end pt-3 pt-md-0"B>><"row"<"col-sm-12 col-md-6"l><"col-sm-12 col-md-6 d-flex justify-content-center justify-content-md-end"f>>t<"row"<"col-sm-12 col-md-6"i><"col-sm-12 col-md-6"p>>',
        displayLength: 7,
        lengthMenu: [7, 10, 25, 50, 75, 100],
        buttons: [
        {
            extend: 'collection',
            className: 'btn btn-label-primary dropdown-toggle me-5',
            text: '<i class="ti ti-file-export me-sm-1"></i> <span class="d-none d-sm-inline-block">Export</span>',
            buttons: [
            {
                extend: 'print',
                text: '<i class="ti ti-printer me-1" ></i>Print',
                className: 'dropdown-item',
                exportOptions: { columns: [0 , 1 , 2] }
            },
            {
                extend: 'csv',
                text: '<i class="ti ti-file-text me-1" ></i>Csv',
                className: 'dropdown-item',
                exportOptions: { columns: [0 , 1 , 2 ] }
            },
            {
                extend: 'pdf',
                text: '<i class="ti ti-file-description me-1"></i>Pdf',
                className: 'dropdown-item',
                exportOptions: { columns: [0 , 1 , 2] }
            },
            {
                extend: 'copy',
                text: '<i class="ti ti-copy me-1" ></i>Copy',
                className: 'dropdown-item',
                exportOptions: { columns: [0 , 1 , 2 ] }
            }
            ]
        },
        ],
        responsive: {
            details: {
              display: $.fn.dataTable.Responsive.display.modal({
                header: function (row) {
                  var data = row.data();
                  return 'Details of ' + data['Name'];
                }
              }),
              type: 'column',
              renderer: function (api, rowIdx, columns) {
                var data = $.map(columns, function (col, i) {
                  return col.title !== '' // ? Do not show row in modal popup if title is blank (for check box)
                    ? '<tr data-dt-row="' +
                        col.rowIndex +
                        '" data-dt-column="' +
                        col.columnIndex +
                        '">' +
                        '<td>' +
                        col.title +
                        ':' +
                        '</td> ' +
                        '<td>' +
                        col.data +
                        '</td>' +
                        '</tr>'
                    : '';
                }).join('');
    
                return data ? $('<table class="table"/><tbody />').append(data) : false;
              }
            }
          }
        });
      }
    });